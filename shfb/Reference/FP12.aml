<?xml version="1.0" encoding="utf-8"?>
<topic id="b5028b09-95f9-4d1a-a524-cb3095cfc0e0" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <summary>
      <para>The <codeInline>FP12</codeInline> data type is used for two-dimensional floating point arrays.</para>
    </summary>
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>
      If you want to do high-performance numerical computation in Excel, you will need
    to use the 
        <codeInline>FP12</codeInline> data type. It is a two dimensional array of double precision
    floating point numbers defined by Microsoft as follows.
    <codeReference>FP#struct</codeReference>
    The array of floating point numbers is not copied when supplied as an argument to a function,
    it is a pointer to memory managed by Excel. Both VB and C# add-ins copy the data out
    of Excel, and copy the data back in to Excel if used as a return value.
    </para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title><codeInline>xll::FP12</codeInline> class</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
        This class provides a wrapper around the vanilla struct modeled after
        <codeInline>std::vector</codeInline> from the C++ standard library.
        <codeReference>FP#usage</codeReference>
        </para>
        <para>
         Of course Excel knows nothing about the C++ class so when you get an array passed
    in from Excel you should declare it as either <codeInline>_FP12</codeInline>
    or <codeInline>::FP12</codeInline>, but not <codeInline>xll::FP</codeInline>.
    Likewise when you return this data type.
        </para>
        <para>
        Here is an example of calling <codeInline>std::unique</codeInline> from the
        C++ standard library.
        <codeReference>FP#unique</codeReference>
        </para>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>